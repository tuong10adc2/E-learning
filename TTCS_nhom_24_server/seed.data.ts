import mongoose from "mongoose";
import { UserModel } from "./src/database/users";
import { CategoryModel } from "./src/database/category";
import { TagModel } from "./src/database/tag";
import { CourseModel } from "./src/database/course";
import { TopicModel } from "./src/database/topic";
import { LessonModel } from "./src/database/lesson";
import { QuestionModel } from "./src/database/question";
import { FeedbackModel } from "./src/database/feedback";
import { encodeSHA256Pass } from "./src/submodule/utils/crypto";
import TTCSconfig from "./src/submodule/common/config";

const DB_URL = `mongodb+srv://cms_admin:Cms0123456@cluster0.o54tydp.mongodb.net/`;

async function seedData() {
  try {
    // K·∫øt n·ªëi database
    await mongoose.connect(DB_URL, { dbName: "my_db" });
    console.log("‚úÖ Connected to MongoDB");

    // X√≥a d·ªØ li·ªáu c≈© (n·∫øu c√≥)
    await UserModel.deleteMany({});
    await CategoryModel.deleteMany({});
    await TagModel.deleteMany({});
    await CourseModel.deleteMany({});
    await TopicModel.deleteMany({});
    await LessonModel.deleteMany({});
    await QuestionModel.deleteMany({});
    await FeedbackModel.deleteMany({});
    console.log("üóëÔ∏è Cleared existing data");

    // 1. T·∫°o Categories
    const categories = await CategoryModel.insertMany([
      {
        name: "L·ªõp 1",
        status: 1,
        avatar: "https://via.placeholder.com/150/FF6B6B/FFFFFF?text=L·ªõp+1",
        des: "Ch∆∞∆°ng tr√¨nh h·ªçc d√†nh cho h·ªçc sinh l·ªõp 1",
        slug: "lop-1",
        index: 1,
      },
      {
        name: "L·ªõp 2",
        status: 1,
        avatar: "https://via.placeholder.com/150/4ECDC4/FFFFFF?text=L·ªõp+2",
        des: "Ch∆∞∆°ng tr√¨nh h·ªçc d√†nh cho h·ªçc sinh l·ªõp 2",
        slug: "lop-2",
        index: 2,
      },
      {
        name: "L·ªõp 3",
        status: 1,
        avatar: "https://via.placeholder.com/150/45B7D1/FFFFFF?text=L·ªõp+3",
        des: "Ch∆∞∆°ng tr√¨nh h·ªçc d√†nh cho h·ªçc sinh l·ªõp 3",
        slug: "lop-3",
        index: 3,
      },
      {
        name: "L·ªõp 4",
        status: 1,
        avatar: "https://via.placeholder.com/150/96CEB4/FFFFFF?text=L·ªõp+4",
        des: "Ch∆∞∆°ng tr√¨nh h·ªçc d√†nh cho h·ªçc sinh l·ªõp 4",
        slug: "lop-4",
        index: 4,
      },
      {
        name: "L·ªõp 5",
        status: 1,
        avatar: "https://via.placeholder.com/150/FFEAA7/FFFFFF?text=L·ªõp+5",
        des: "Ch∆∞∆°ng tr√¨nh h·ªçc d√†nh cho h·ªçc sinh l·ªõp 5",
        slug: "lop-5",
        index: 5,
      },
    ]);
    console.log("‚úÖ Created categories");

    // 2. T·∫°o Tags
    const tags = await TagModel.insertMany([
      {
        name: "To√°n h·ªçc",
        status: 1,
        idCategory: categories.map((cat) => cat._id),
      },
      {
        name: "Ti·∫øng Vi·ªát",
        status: 1,
        idCategory: categories.map((cat) => cat._id),
      },
      {
        name: "Ti·∫øng Anh",
        status: 1,
        idCategory: categories.map((cat) => cat._id),
      },
      {
        name: "Khoa h·ªçc",
        status: 1,
        idCategory: categories.map((cat) => cat._id),
      },
      {
        name: "L·ªãch s·ª≠",
        status: 1,
        idCategory: categories.map((cat) => cat._id),
      },
    ]);
    console.log("‚úÖ Created tags");

    // 3. T·∫°o Courses
    const courses = await CourseModel.insertMany([
      {
        courseName: "To√°n h·ªçc l·ªõp 1 - C∆° b·∫£n",
        status: 1,
        des: "Kh√≥a h·ªçc to√°n h·ªçc c∆° b·∫£n d√†nh cho h·ªçc sinh l·ªõp 1",
        shortDes: "H·ªçc to√°n c∆° b·∫£n l·ªõp 1",
        slug: "toan-hoc-lop-1-co-ban",
        avatar: "https://via.placeholder.com/300/FF6B6B/FFFFFF?text=To√°n+L·ªõp+1",
        idCategory: categories[0]._id,
        idTag: tags[0]._id,
      },
      {
        courseName: "Ti·∫øng Vi·ªát l·ªõp 1 - T·∫≠p ƒë·ªçc",
        status: 1,
        des: "Kh√≥a h·ªçc t·∫≠p ƒë·ªçc ti·∫øng Vi·ªát d√†nh cho h·ªçc sinh l·ªõp 1",
        shortDes: "H·ªçc t·∫≠p ƒë·ªçc ti·∫øng Vi·ªát l·ªõp 1",
        slug: "tieng-viet-lop-1-tap-doc",
        avatar:
          "https://via.placeholder.com/300/4ECDC4/FFFFFF?text=Ti·∫øng+Vi·ªát+L·ªõp+1",
        idCategory: categories[0]._id,
        idTag: tags[1]._id,
      },
      {
        courseName: "Ti·∫øng Anh l·ªõp 2 - Giao ti·∫øp",
        status: 1,
        des: "Kh√≥a h·ªçc ti·∫øng Anh giao ti·∫øp d√†nh cho h·ªçc sinh l·ªõp 2",
        shortDes: "H·ªçc ti·∫øng Anh giao ti·∫øp l·ªõp 2",
        slug: "tieng-anh-lop-2-giao-tiep",
        avatar:
          "https://via.placeholder.com/300/45B7D1/FFFFFF?text=Ti·∫øng+Anh+L·ªõp+2",
        idCategory: categories[1]._id,
        idTag: tags[2]._id,
      },
    ]);
    console.log("‚úÖ Created courses");

    // 4. T·∫°o Topics
    const topics = await TopicModel.insertMany([
      {
        name: "Ch∆∞∆°ng 1: S·ªë t·ª± nhi√™n",
        status: 1,
        idCourse: courses[0]._id.toString(),
        des: "H·ªçc v·ªÅ c√°c s·ªë t·ª± nhi√™n t·ª´ 0 ƒë·∫øn 10",
        index: 1,
        video: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
        topicType: 1,
        timeExam: 30,
        numQuestion: 10,
      },
      {
        name: "Ch∆∞∆°ng 2: Ph√©p c·ªông",
        status: 1,
        idCourse: courses[0]._id.toString(),
        des: "H·ªçc v·ªÅ ph√©p c·ªông trong ph·∫°m vi 10",
        index: 2,
        video: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
        topicType: 1,
        timeExam: 30,
        numQuestion: 10,
      },
      {
        name: "B√†i 1: B·∫£ng ch·ªØ c√°i",
        status: 1,
        idCourse: courses[1]._id.toString(),
        des: "H·ªçc b·∫£ng ch·ªØ c√°i ti·∫øng Vi·ªát",
        index: 1,
        video: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
        topicType: 1,
        timeExam: 20,
        numQuestion: 5,
      },
    ]);
    console.log("‚úÖ Created topics");

    // 5. T·∫°o Lessons (t·∫°m th·ªùi t·∫°o r·ªóng n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu c·ª• th·ªÉ)
    const lessons = await LessonModel.insertMany([
      {
        status: 1,
        idTopic: topics[0]._id,
        video: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
        des: "B√†i h·ªçc v·ªÅ s·ªë t·ª± nhi√™n t·ª´ 0 ƒë·∫øn 5",
        type: 1,
      },
      {
        status: 1,
        idTopic: topics[0]._id,
        video: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
        des: "B√†i h·ªçc v·ªÅ s·ªë t·ª± nhi√™n t·ª´ 6 ƒë·∫øn 10",
        type: 1,
      },
      {
        status: 1,
        idTopic: topics[1]._id,
        video: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
        des: "B√†i h·ªçc v·ªÅ ph√©p c·ªông v·ªõi s·ªë 1",
        type: 1,
      },
    ]);
    console.log("‚úÖ Created lessons");

    // 6. T·∫°o Questions (C√¢u h·ªèi)
    const questions = await QuestionModel.insertMany([
      {
        question: "S·ªë n√†o l·ªõn h∆°n: 3 hay 7?",
        result: [{ index: 1, text: "7" }],
        answer: [
          { index: 1, text: "3", isResult: false },
          { index: 2, text: "7", isResult: true },
        ],
        status: 1,
        idTopic: topics[0]._id,
        hint: "ƒê·∫øm t·ª´ 1 ƒë·∫øn 10 ƒë·ªÉ so s√°nh",
        index: 1,
      },
      {
        question: "2 + 3 = ?",
        result: [{ index: 1, text: "5" }],
        answer: [
          { index: 1, text: "4", isResult: false },
          { index: 2, text: "5", isResult: true },
          { index: 3, text: "6", isResult: false },
        ],
        status: 1,
        idTopic: topics[1]._id,
        hint: "ƒê·∫øm t·ª´ 2 th√™m 3 ƒë∆°n v·ªã",
        index: 1,
      },
      {
        question: "Ch·ªØ c√°i n√†o ƒë·ª©ng ƒë·∫ßu b·∫£ng ch·ªØ c√°i?",
        result: [{ index: 1, text: "A" }],
        answer: [
          { index: 1, text: "A", isResult: true },
          { index: 2, text: "B", isResult: false },
          { index: 3, text: "C", isResult: false },
        ],
        status: 1,
        idTopic: topics[2]._id,
        hint: "A l√† ch·ªØ c√°i ƒë·∫ßu ti√™n",
        index: 1,
      },
    ]);
    console.log("‚úÖ Created questions");

    // 7. T·∫°o Users (Ng∆∞·ªùi d√πng)
    const users = await UserModel.insertMany([
      {
        account: "admin",
        name: "Administrator",
        email: "admin@ttcs.com",
        password: encodeSHA256Pass("admin", "123456"),
        classNumber: 1,
        phoneNumber: "0123456789",
        address: "H√† N·ªôi, Vi·ªát Nam",
        birth: Date.now(),
        gender: 1,
        registerDate: Date.now(),
        status: 1,
        userRole: TTCSconfig.ROLE_ADMIN, // 0 - Admin/Teacher
        lastLogin: Date.now(),
      },
      {
        account: "teacher1",
        name: "Gi√°o vi√™n Nguy·ªÖn VƒÉn A",
        email: "teacher1@ttcs.com",
        password: encodeSHA256Pass("teacher1", "123456"),
        classNumber: 1,
        phoneNumber: "0987654321",
        address: "TP.HCM, Vi·ªát Nam",
        birth: Date.now(),
        gender: 1,
        registerDate: Date.now(),
        status: 1,
        userRole: TTCSconfig.ROLE_ADMIN, // 0 - Admin/Teacher
        lastLogin: Date.now(),
      },
      {
        account: "student1",
        name: "H·ªçc sinh Tr·∫ßn Th·ªã B",
        email: "student1@ttcs.com",
        password: encodeSHA256Pass("student1", "123456"),
        classNumber: 1,
        phoneNumber: "0369852147",
        address: "ƒê√† N·∫µng, Vi·ªát Nam",
        birth: Date.now(),
        gender: 0,
        registerDate: Date.now(),
        status: 1,
        userRole: TTCSconfig.ROLE_USER, // 1 - Student/User
        lastLogin: Date.now(),
      },
      {
        account: "student2",
        name: "H·ªçc sinh L√™ VƒÉn C",
        email: "student2@ttcs.com",
        password: encodeSHA256Pass("student2", "123456"),
        classNumber: 2,
        phoneNumber: "0369852148",
        address: "Hu·∫ø, Vi·ªát Nam",
        birth: Date.now(),
        gender: 1,
        registerDate: Date.now(),
        status: 1,
        userRole: TTCSconfig.ROLE_USER, // 1 - Student/User
        lastLogin: Date.now(),
      },
    ]);
    console.log("‚úÖ Created users");

    // 8. T·∫°o Feedback (Ph·∫£n h·ªìi)
    const feedbacks = await FeedbackModel.insertMany([
      {
        name: "Ph·ª• huynh Nguy·ªÖn VƒÉn C",
        email: "parent1@email.com",
        phone: "0123456789",
        content: "Kh√≥a h·ªçc r·∫•t hay v√† b·ªï √≠ch cho con t√¥i. C·∫£m ∆°n TTCS!",
        status: 1,
      },
      {
        name: "H·ªçc sinh L√™ VƒÉn D",
        email: "student2@email.com",
        phone: "0987654321",
        content:
          "T√¥i r·∫•t th√≠ch c√°ch gi·∫£ng d·∫°y c·ªßa c√°c th·∫ßy c√¥. B√†i h·ªçc r·∫•t d·ªÖ hi·ªÉu.",
        status: 1,
      },
    ]);
    console.log("‚úÖ Created feedbacks");

    console.log("\nüéâ SEED DATA COMPLETED SUCCESSFULLY!");
    console.log("\nüìä Summary:");
    console.log(`- Categories: ${categories.length}`);
    console.log(`- Tags: ${tags.length}`);
    console.log(`- Courses: ${courses.length}`);
    console.log(`- Topics: ${topics.length}`);
    console.log(`- Lessons: ${lessons.length}`);
    console.log(`- Questions: ${questions.length}`);
    console.log(`- Users: ${users.length}`);
    console.log(`- Feedbacks: ${feedbacks.length}`);

    console.log("\nüîë Default login accounts:");
    console.log("- Admin/Teacher: admin / 123456 (userRole: 0)");
    console.log("- Admin/Teacher: teacher1 / 123456 (userRole: 0)");
    console.log("- Student/User: student1 / 123456 (userRole: 1)");
    console.log("- Student/User: student2 / 123456 (userRole: 1)");

    console.log("\nüìã User Roles:");
    console.log("- userRole: 0 = Admin/Teacher (c√≥ quy·ªÅn qu·∫£n tr·ªã)");
    console.log("- userRole: 1 = Student/User (h·ªçc sinh)");
  } catch (error) {
    console.error("‚ùå Error seeding data:", error);
  } finally {
    await mongoose.disconnect();
    console.log("üîå Disconnected from MongoDB");
  }
}

// Ch·∫°y script
seedData();
